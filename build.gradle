buildscript {
    repositories {
        jcenter()
        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.0'
    }
}

allprojects {
    repositories {
        jcenter()
        google()
    }
}

apply plugin: 'com.android.application'

dependencies {
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.1.0-alpha01'
    implementation 'androidx.drawerlayout:drawerlayout:1.1.0-rc01'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    compileOnly 'org.ccil.cowan.tagsoup:tagsoup:1.2.1'
    implementation 'androidx.browser:browser:1.2.0'
    implementation 'io.noties.markwon:core:4.4.0'
    implementation 'com.google.android.exoplayer:exoplayer:2.11.5'
    implementation project(":player-lib")
}

def privateProperties = new Properties()
if (file('private.properties').exists()) {
    privateProperties.load(new FileInputStream(file('private.properties')))
}

android {
    compileSdkVersion 29

    sourceSets.main {
        manifest.srcFile 'AndroidManifest.xml'
        java.srcDirs = ['src', 'src-api', 'src-external']
        resources.srcDirs = ['src']
        aidl.srcDirs = ['src']
        renderscript.srcDirs = ['src']
        res.srcDirs = ['res']
        assets.srcDirs = ['assets']
        jni.srcDirs = []
        jniLibs.srcDir 'libs'
    }

    if (file('keystore.properties').exists()) {
        def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(file('keystore.properties')))

        signingConfigs {
            general {
                storeFile file(keystoreProperties['store.file'])
                storePassword keystoreProperties['store.password']
                keyAlias keystoreProperties['key.alias']
                keyPassword keystoreProperties['key.password']
                v1SigningEnabled true
                v2SigningEnabled true
            }
        }

        buildTypes.debug.signingConfig signingConfigs.general
        buildTypes.release.signingConfig signingConfigs.general
    }

    defaultConfig {

        def apiKeyGoogle = privateProperties['api.key.google']
        def apiKeySoundCloud = privateProperties['api.key.soundcloud']

        if (apiKeyGoogle == null) apiKeyGoogle = ''
        if (apiKeySoundCloud == null) apiKeySoundCloud = ''

        buildConfigField 'String', 'API_KEY_GOOGLE', '"' + apiKeyGoogle + '"'
        buildConfigField 'String', 'API_KEY_SOUNDCLOUD', '"' + apiKeySoundCloud + '"'
        buildConfigField 'long', 'BUILD_TIMESTAMP', System.currentTimeMillis() + 'L'

        minSdkVersion 16
        //noinspection ExpiredTargetSdkVersion
        targetSdkVersion 25
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    lintOptions {
        abortOnError false
        disable 'MissingTranslation', 'ValidFragment', 'ResourceType'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

def getNdkBuildCommand() {
    def ndkDir = System.env.ANDROID_NDK_HOME
    if (ndkDir == null && file('local.properties').exists()) {
        Properties localProperties = new Properties()
        localProperties.load(new FileInputStream(file('local.properties')))
        ndkDir = localProperties.getProperty('ndk.dir')
    }
    def windows = org.gradle.internal.os.OperatingSystem.current().isWindows()
    return (ndkDir != null ? ndkDir + File.separator : '') + 'ndk-build' + (windows ? '.cmd' : '')
}

task ndkBuildCompile(type: Exec) {
    commandLine getNdkBuildCommand(), '-C', file('.').absolutePath
}

task ndkBuildClean(type: Exec) {
    commandLine getNdkBuildCommand(), 'clean', file('.').absolutePath
}

tasks.withType(JavaCompile) { compileTask ->
    compileTask.dependsOn ndkBuildCompile
}

clean.dependsOn ndkBuildClean
